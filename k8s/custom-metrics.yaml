apiVersion: v1
kind: ServiceMonitor
metadata:
  name: cfscraper-metrics
  labels:
    app: cfscraper-api
spec:
  selector:
    matchLabels:
      app: cfscraper-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cfscraper-autoscaling-rules
  labels:
    app: cfscraper-api
spec:
  groups:
  - name: cfscraper.autoscaling
    interval: 30s
    rules:
    # Job queue depth metric for autoscaling
    - record: job_queue_size
      expr: job_queue_size
      labels:
        service: cfscraper-api
    
    # HTTP requests per second for autoscaling
    - record: http_requests_per_second
      expr: rate(http_requests_total[1m])
      labels:
        service: cfscraper-api
    
    # Database connection pool utilization
    - record: db_connection_pool_utilization
      expr: (db_connection_pool_checked_out / db_connection_pool_size) * 100
      labels:
        service: cfscraper-api
    
    # Redis connection pool utilization
    - record: redis_connection_pool_utilization
      expr: (redis_connection_pool_size - redis_connection_pool_available) / redis_connection_pool_size * 100
      labels:
        service: cfscraper-api
    
    # Memory usage percentage
    - record: memory_usage_percentage
      expr: (memory_usage_bytes{type="rss"} / memory_usage_bytes{type="total"}) * 100
      labels:
        service: cfscraper-api
    
    # Active jobs count
    - record: active_jobs_count
      expr: active_jobs
      labels:
        service: cfscraper-api
    
    # Error rate percentage
    - record: error_rate_percentage
      expr: (rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m])) * 100
      labels:
        service: cfscraper-api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-adapter-config
data:
  config.yaml: |
    rules:
    # Job queue size metric
    - seriesQuery: 'job_queue_size{service="cfscraper-api"}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
      name:
        matches: "^job_queue_size"
        as: "job_queue_size"
      metricsQuery: 'avg(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)'
    
    # HTTP requests per second
    - seriesQuery: 'http_requests_per_second{service="cfscraper-api"}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
      name:
        matches: "^http_requests_per_second"
        as: "http_requests_per_second"
      metricsQuery: 'avg(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)'
    
    # Database connection pool utilization
    - seriesQuery: 'db_connection_pool_utilization{service="cfscraper-api"}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
      name:
        matches: "^db_connection_pool_utilization"
        as: "db_connection_pool_utilization"
      metricsQuery: 'avg(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)'
    
    # Active jobs count
    - seriesQuery: 'active_jobs_count{service="cfscraper-api"}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
      name:
        matches: "^active_jobs_count"
        as: "active_jobs_count"
      metricsQuery: 'avg(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-adapter
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-adapter
  template:
    metadata:
      labels:
        app: prometheus-adapter
    spec:
      containers:
      - name: prometheus-adapter
        image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.10.0
        args:
        - --cert-dir=/var/run/serving-cert
        - --config=/etc/adapter/config.yaml
        - --logtostderr=true
        - --prometheus-url=http://prometheus:9090/
        - --metrics-relist-interval=1m
        - --v=4
        ports:
        - containerPort: 6443
        volumeMounts:
        - name: config
          mountPath: /etc/adapter
        - name: tmp-vol
          mountPath: /tmp
        - name: serving-cert
          mountPath: /var/run/serving-cert
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: config
        configMap:
          name: prometheus-adapter-config
      - name: tmp-vol
        emptyDir: {}
      - name: serving-cert
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-adapter
  namespace: monitoring
spec:
  ports:
  - name: https
    port: 443
    targetPort: 6443
  selector:
    app: prometheus-adapter

---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.custom.metrics.k8s.io
spec:
  service:
    name: prometheus-adapter
    namespace: monitoring
  group: custom.metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
