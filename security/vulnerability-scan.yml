# Vulnerability Scanning Configuration
# This file configures automated vulnerability scanning for the CFScraper API

name: Security Vulnerability Scan

# Dependency Scanning with Safety
safety:
  enabled: true
  config:
    # Check Python dependencies for known vulnerabilities
    command: "safety check --json --output safety-report.json"
    # Ignore specific vulnerabilities if needed (use with caution)
    ignore: []
    # Fail build on vulnerabilities
    fail_on_vulnerability: true
    # Minimum severity level to report
    min_severity: "medium"

# Static Code Analysis with Bandit
bandit:
  enabled: true
  config:
    # Bandit configuration for Python security linting
    command: "bandit -r app/ -f json -o bandit-report.json"
    # Exclude test files
    exclude: "tests/"
    # Confidence levels: LOW, MEDIUM, HIGH
    confidence: "MEDIUM"
    # Severity levels: LOW, MEDIUM, HIGH
    severity: "MEDIUM"
    # Skip specific test IDs if needed
    skip: []

# Container Image Scanning
container_scan:
  enabled: true
  config:
    # Use Trivy for container vulnerability scanning
    scanner: "trivy"
    command: "trivy image --format json --output container-scan-report.json"
    # Severity levels to report
    severities: ["HIGH", "CRITICAL"]
    # Scan both OS packages and application dependencies
    scan_types: ["os", "library"]

# OWASP Dependency Check
owasp_dependency_check:
  enabled: true
  config:
    command: "dependency-check --project CFScraper --scan . --format JSON --out dependency-check-report.json"
    # Suppress false positives
    suppression_file: "security/dependency-check-suppressions.xml"
    # Fail build threshold
    fail_build_on_cvss: 7.0

# Semgrep for additional static analysis
semgrep:
  enabled: true
  config:
    # Use OWASP Top 10 ruleset
    rulesets: ["owasp-top-ten", "security"]
    command: "semgrep --config=auto --json --output=semgrep-report.json app/"
    # Exclude test files
    exclude: "tests/"

# License Scanning
license_scan:
  enabled: true
  config:
    # Check for license compliance
    command: "pip-licenses --format=json --output-file=license-report.json"
    # Allowed licenses
    allowed_licenses:
      - "MIT"
      - "Apache-2.0"
      - "BSD-3-Clause"
      - "BSD-2-Clause"
      - "ISC"
    # Forbidden licenses
    forbidden_licenses:
      - "GPL-3.0"
      - "AGPL-3.0"

# Secret Scanning
secret_scan:
  enabled: true
  config:
    # Use truffleHog for secret detection
    scanner: "trufflehog"
    command: "trufflehog --json --output=secrets-report.json ."
    # Exclude patterns
    exclude_patterns:
      - "*.pyc"
      - "__pycache__/"
      - ".git/"
      - "node_modules/"

# Reporting Configuration
reporting:
  # Output formats
  formats: ["json", "html", "sarif"]
  # Report aggregation
  aggregate_reports: true
  # Upload to security dashboard
  upload_enabled: false
  # Notification settings
  notifications:
    slack_webhook: ""
    email_recipients: []

# CI/CD Integration
ci_integration:
  # GitHub Actions
  github_actions:
    enabled: true
    workflow_file: ".github/workflows/security-scan.yml"
    # Run on pull requests and main branch
    triggers: ["pull_request", "push"]
    # Schedule regular scans
    schedule: "0 2 * * *"  # Daily at 2 AM
  
  # Pre-commit hooks
  pre_commit:
    enabled: true
    hooks:
      - "safety check"
      - "bandit -r app/"
      - "semgrep --config=auto app/"

# Thresholds and Policies
policies:
  # Maximum allowed vulnerabilities by severity
  max_vulnerabilities:
    critical: 0
    high: 2
    medium: 10
    low: 50
  
  # Age thresholds for vulnerabilities
  max_age_days:
    critical: 1
    high: 7
    medium: 30
    low: 90
  
  # CVSS score thresholds
  cvss_thresholds:
    fail_build: 7.0
    warn: 4.0

# Exclusions and Suppressions
exclusions:
  # Files to exclude from scanning
  files:
    - "tests/"
    - "docs/"
    - "*.md"
    - "*.txt"
  
  # Directories to exclude
  directories:
    - "__pycache__/"
    - ".git/"
    - "node_modules/"
    - "venv/"
    - ".venv/"
  
  # Known false positives (use with caution)
  false_positives: []

# Remediation
remediation:
  # Auto-fix enabled
  auto_fix: false
  # Create issues for vulnerabilities
  create_issues: true
  # Assign to security team
  assignees: ["security-team"]
  # Labels for issues
  labels: ["security", "vulnerability"]
